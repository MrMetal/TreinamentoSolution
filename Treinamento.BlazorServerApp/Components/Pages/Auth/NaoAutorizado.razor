@page "/401"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider

<style>
    .unauthorized-container {
        max-width: 500px;
        margin: 3rem auto;
        padding: 2rem;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        background-color: #fefefe;
    }

        .unauthorized-container h1 {
            font-size: 2rem;
            color: #dc3545;
        }

        .unauthorized-container .buttons {
            margin-top: 1.5rem;
            display: flex;
            justify-content: center;
            gap: 1rem;
        }

    button.btn {
        padding: 0.5rem 1.25rem;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        border: none;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

</style>

<div class="unauthorized-container">
    <h1>🚫 Acesso Negado (401)</h1>

    <p>
        @if (IsAuthenticated)
        {
            <span>Você está logado, mas não tem permissão para acessar esta página.</span>
        }
        else
        {
            <span>Você precisa estar logado para acessar esta página.</span>
        }
    </p>

    <div class="buttons">
        <button class="btn btn-primary" @onclick="GoToHome">🏠 Página Inicial</button>
        @if (!IsAuthenticated)
        {
            <button class="btn btn-secondary" @onclick="GoToLogin">🔐 Login</button>
        }
    </div>
</div>

@code {
    private bool IsAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity?.IsAuthenticated == true;
    }

    private void GoToHome() => NavigationManager.NavigateTo("/");
    private void GoToLogin() => NavigationManager.NavigateTo("/login");
}