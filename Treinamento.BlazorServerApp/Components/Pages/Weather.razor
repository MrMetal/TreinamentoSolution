@page "/weather"
@using Microsoft.AspNetCore.Authorization
@using Treinamento.BlazorServerApp.Data

@attribute [Authorize]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>
<p>Este componente mostra dados com virtualização eficiente.</p>

@if (forecasts == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="virtual-table">
        <div class="virtual-header">
            <div>Date</div>
            <div>Temp. (C)</div>
            <div>Temp. (F)</div>
            <div>Summary</div>
        </div>

        <div class="virtual-body">
            <Virtualize ItemsProvider="LoadForecasts" ItemSize="30" Context="item">
                <div class="virtual-row">
                    <div>@item.Date.ToShortDateString()</div>
                    <div>@item.TemperatureC</div>
                    <div>@item.TemperatureF</div>
                    <div>@item.Summary</div>
                </div>
            </Virtualize>
        </div>
    </div>
}

<style>
    .virtual-table {
        width: 100%;
        font-family: sans-serif;
    }

    .virtual-header, .virtual-row {
        display: flex;
        border-bottom: 1px solid #ccc;
        padding: 8px 0;
    }

    .virtual-header {
        font-weight: bold;
        background-color: #f0f0f0;
    }

        .virtual-row > div, .virtual-header > div {
            flex: 1;
            padding: 0 10px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

    .virtual-body {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
    }
</style>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // Simulação de carregamento

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        forecasts = Enumerable.Range(1, 90).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private async ValueTask<ItemsProviderResult<WeatherForecast>> LoadForecasts(ItemsProviderRequest request)
    {
        if (forecasts == null)
        {
            return new ItemsProviderResult<WeatherForecast>(Array.Empty<WeatherForecast>(), 0);
        }

        var requestedItems = forecasts.Skip(request.StartIndex).Take(request.Count).ToArray();

        await Task.Delay(100); // Simula carregamento

        return new ItemsProviderResult<WeatherForecast>(requestedItems, forecasts.Length);
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
