@page "/weather"
@using Microsoft.AspNetCore.Authorization
@using Treinamento.BlazorServerApp.Data

@attribute [Authorize(Policy = AppPolicies.SomenteAdmins)]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>

            <Virtualize ItemsProvider="LoadForecasts" OverscanCount="20" ItemSize="20" Context="item">
                <tr>
                    <td>@item.Date.ToShortDateString()</td>
                    <td>@item.TemperatureC</td>
                    <td>@item.TemperatureF</td>
                    <td>@item.Summary</td>
                </tr>
            </Virtualize>


        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // Simulação de carregamento

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 50).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private async ValueTask<ItemsProviderResult<WeatherForecast>> LoadForecasts(ItemsProviderRequest request)
    {
        if (forecasts == null)
        {
            return new ItemsProviderResult<WeatherForecast>(Array.Empty<WeatherForecast>(), 0);
        }

        var requestedItems = forecasts.Skip(request.StartIndex).Take(request.Count).ToArray();

        // Simular atraso opcional para testar carregamento
        await Task.Delay(100);

        return new ItemsProviderResult<WeatherForecast>(requestedItems, forecasts.Length);
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
